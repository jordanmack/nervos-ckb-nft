TARGET := riscv64-unknown-linux-gnu
CC := $(TARGET)-gcc
LD := $(TARGET)-gcc
OBJCOPY := $(TARGET)-objcopy
DEBUG_DIR := build/debug
RELEASE_DIR := build/release
CFLAGS := -fPIC -O3 -fno-builtin-memcmp -fno-builtin-printf -nostdinc -nostdlib -nostartfiles -fvisibility=hidden -I deps/ckb-c-stdlib -I deps/ckb-c-stdlib/libc -I deps -I deps/ckb-c-stdlib/molecule -I c -I src -Wall -Werror -Wno-nonnull -Wno-nonnull-compare -Wno-unused-function -g
LDFLAGS := -Wl,-static -fdata-sections -ffunction-sections -Wl,--gc-sections
DBGFLAGS := -DCKB_C_STDLIB_PRINTF
MOLC := moleculec
MOLC_VERSION := 0.6.0
PROTOCOL_HEADER := build/blockchain.h
PROTOCOL_SCHEMA := build/blockchain.mol
PROTOCOL_VERSION := d75e4c56ffa40e17fd2fe477da3f98c5578edcd1
PROTOCOL_URL := https://raw.githubusercontent.com/nervosnetwork/ckb/${PROTOCOL_VERSION}/util/types/schemas/blockchain.mol

# docker pull nervos/ckb-riscv-gnu-toolchain:gnu-bionic-20191012
BUILDER_DOCKER := nervos/ckb-riscv-gnu-toolchain@sha256:aae8a3f79705f67d505d1f1d5ddc694a4fd537ed1c7e9622420a470d59ba2ec3

via-docker: ${PROTOCOL_HEADER}
	docker run --rm -v `pwd`:/code -w /code ${BUILDER_DOCKER} bash -c "make $(ARGS)"

# Generate CKB molecule structures
generate-protocol: check-moleculec-version ${PROTOCOL_HEADER}

check-moleculec-version:
	test "$$(${MOLC} --version | awk '{ print $$2 }' | tr -d ' ')" = ${MOLC_VERSION}

${PROTOCOL_HEADER}: ${PROTOCOL_SCHEMA}
	${MOLC} --language c --schema-file $< > $@

${PROTOCOL_SCHEMA}:
	curl -L -o $@ ${PROTOCOL_URL}

# Install moleculec
install-tools:
	if [ ! -x "$$(command -v "${MOLC}")" ] \
			|| [ "$$(${MOLC} --version | awk '{ print $$2 }' | tr -d ' ')" != "${MOLC_VERSION}" ]; then \
		cargo install --force --version "${MOLC_VERSION}" "${MOLC}"; \
	fi

# Formmating source code
fmt:
	clang-format -i -style=Google $(wildcard c/*.h c/*.c)
	git diff --exit-code $(wildcard c/*.h c/*.c)

clean:
	rm -rf build/*.o
	rm -rf build/*.so
	rm -rf build/*.debug

.PHONY: via-docker clean fmt
.PHONY: generate-protocol check-moleculec-version install-tools
$(DEBUG_DIR)/token-logic-custom-quantity.so: src/token-logic-custom-quantity.c $(PROTOCOL_HEADER)
	$(CC) $(CFLAGS) $(DBGFLAGS) $(LDFLAGS) -shared -o $@ $<
	$(OBJCOPY) --only-keep-debug $@ $@.debug
	$(OBJCOPY) --strip-debug --strip-all $@
$(RELEASE_DIR)/token-logic-custom-quantity.so: src/token-logic-custom-quantity.c $(PROTOCOL_HEADER)
	$(CC) $(CFLAGS) $(LDFLAGS) -shared -o $@ $<
	$(OBJCOPY) --only-keep-debug $@ $@.debug
	$(OBJCOPY) --strip-debug --strip-all $@

$(DEBUG_DIR)/token-logic-approve.so: src/token-logic-approve.c $(PROTOCOL_HEADER)
	$(CC) $(CFLAGS) $(DBGFLAGS) $(LDFLAGS) -shared -o $@ $<
	$(OBJCOPY) --only-keep-debug $@ $@.debug
	$(OBJCOPY) --strip-debug --strip-all $@
$(RELEASE_DIR)/token-logic-approve.so: src/token-logic-approve.c $(PROTOCOL_HEADER)
	$(CC) $(CFLAGS) $(LDFLAGS) -shared -o $@ $<
	$(OBJCOPY) --only-keep-debug $@ $@.debug
	$(OBJCOPY) --strip-debug --strip-all $@

$(DEBUG_DIR)/token-logic-reject.so: src/token-logic-reject.c $(PROTOCOL_HEADER)
	$(CC) $(CFLAGS) $(DBGFLAGS) $(LDFLAGS) -shared -o $@ $<
	$(OBJCOPY) --only-keep-debug $@ $@.debug
	$(OBJCOPY) --strip-debug --strip-all $@
$(RELEASE_DIR)/token-logic-reject.so: src/token-logic-reject.c $(PROTOCOL_HEADER)
	$(CC) $(CFLAGS) $(LDFLAGS) -shared -o $@ $<
	$(OBJCOPY) --only-keep-debug $@ $@.debug
	$(OBJCOPY) --strip-debug --strip-all $@
